// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id          String       @id @default(uuid())
  plate       String
  vehicleType VehicleType  @default(car)
  status      TicketStatus @default(open)
  paymentType PaymentType?
  priceTable  PriceTable
  checkin     DateTime?    @default(now())
  checkout    DateTime?
  discount    Float?
  total       Float?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isActive    Boolean?     @default(true)
  parkingId   String
  parking     Parking      @relation(fields: [parkingId], references: [id])

  @@map("tickets")
}

enum VehicleType {
  car
  motorcycle
  transport
}

enum TicketStatus {
  open
  canceled
  closed
  finished
}

enum PaymentType {
  pix
  cash
  card
}

enum PriceTable {
  hourly
  diarist
  monthly
}

model Parking {
  id           String   @id @default(uuid())
  cognitoId    String
  email        String
  name         String?
  document     String?
  contact      String?
  street       String?
  streetNumber Int?
  city         String?
  state        String?
  zipCode      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  weekdayOpen  String?
  weekdayClose String?
  weekendOpen  String?
  weekendClose String?

  hourlyPrices  HourlyPrices?
  diaristPrices DiaristPrices?
  monthlyPrices MonthlyPrices?

  Ticket Ticket[]

  @@map("parkings")
}

model HourlyPrices {
  id String @id @default(uuid())

  parkingId String  @unique
  parking   Parking @relation(fields: [parkingId], references: [id])

  pricePer15         Float
  pricePer30         Float
  pricePer60         Float
  pricePerAdditional Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hourly_prices")
}

model DiaristPrices {
  id String @id @default(uuid())

  parkingId String  @unique
  parking   Parking @relation(fields: [parkingId], references: [id])

  pricePerHalfDay Float
  pricePerFullDay Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("diarist_prices")
}

model MonthlyPrices {
  id String @id @default(uuid())

  parkingId String  @unique
  parking   Parking @relation(fields: [parkingId], references: [id])

  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("monthly_prices")
}
